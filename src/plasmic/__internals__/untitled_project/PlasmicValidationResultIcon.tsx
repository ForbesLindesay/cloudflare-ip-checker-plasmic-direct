/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ventExTyscvZpogFdoiw6H
// Component: jOfkMhICa7
import * as React from "react";
import {
  hasVariant,
  createPlasmicElement,
  RenderOpts,
  Override,
  classNames,
  Flex,
  RenderFunc,
  RenderFuncOverrides,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_untitled_project.css"; // plasmic-import: ventExTyscvZpogFdoiw6H/projectcss
import "./PlasmicValidationResultIcon.css"; // plasmic-import: jOfkMhICa7/css

export type PlasmicValidationResultIcon__VariantsArgs = {
  status?: SingleChoiceArg<"valid" | "invalid">;
};

export type PlasmicValidationResultIcon__GlobalVariantsType = {};

export type PlasmicValidationResultIcon__ArgsType = {};

export type PlasmicValidationResultIcon__TriggerStateType = {};

export class PlasmicValidationResultIcon__RenderHelper {
  constructor(
    readonly variants: PlasmicValidationResultIcon__VariantsArgs,
    readonly args: PlasmicValidationResultIcon__ArgsType,
    readonly rootClassName: string | undefined
  ) {}

  childStr2 = () => {
    // [oxI54lpYq, 2]: Don't modify this line

    const args = this.args;
    const variants = this.variants;

    return hasVariant(variants, "status", "invalid")
      ? "✗"
      : hasVariant(variants, "status", "valid")
      ? "✓"
      : "?";
  };

  private rawProps2 = () => {
    const args = this.args;
    const variants = this.variants;

    return {};
  };

  props2 = (
    modifier?: (
      props: ReturnType<PlasmicValidationResultIcon__RenderHelper["rawProps2"]>
    ) => void
  ) => {
    // [oxI54lpYq, 2]: Don't modify this line
    const props = this.rawProps2();
    if (modifier) {
      modifier(props);
    }
    return props;
  };
  cls2 = () => {
    // [oxI54lpYq, 2]: Don't modify this line

    const args = this.args;
    const variants = this.variants;

    return classNames({
      "ValidationResultIcon___2--baseLg__oxI54_0xRi_2ebQ8": true,
      "ValidationResultIcon___2--invalid__oxI544YxMf": hasVariant(
        variants,
        "status",
        "invalid"
      ),

      "ValidationResultIcon___2--valid__oxI54nOGb8": hasVariant(
        variants,
        "status",
        "valid"
      ),

      ValidationResultIcon___2__oxI54: true,
      "plasmic-default__all": true,
      "plasmic-default__div": true
    });
  };

  private rawProps1 = () => {
    const args = this.args;
    const variants = this.variants;

    return {};
  };

  props1 = (
    modifier?: (
      props: ReturnType<PlasmicValidationResultIcon__RenderHelper["rawProps1"]>
    ) => void
  ) => {
    // [ZKgTJ5tnP, 1]: Don't modify this line
    const props = this.rawProps1();
    if (modifier) {
      modifier(props);
    }
    return props;
  };
  cls1 = () => {
    // [ZKgTJ5tnP, 1]: Don't modify this line

    const args = this.args;
    const variants = this.variants;

    return (
      classNames({
        "ValidationResultIcon___1--baseLg__ZKgTJ_0xRi_2ebQ8": true,
        "ValidationResultIcon___1--invalid__ZKgTJ4YxMf": hasVariant(
          variants,
          "status",
          "invalid"
        ),

        "ValidationResultIcon___1--valid__ZKgTJnOGb8": hasVariant(
          variants,
          "status",
          "valid"
        ),

        ValidationResultIcon___1__ZKgTJ: true,
        "plasmic-default__all": true,
        "plasmic-default__div": true
      }) +
      " " +
      (this.rootClassName || "")
    );
  };
}

/* plasmic-nameInIdToUuid/503
      [
        [
          "1",
          "ZKgTJ5tnP"
        ],
        [
          "2",
          "oxI54lpYq"
        ]
      ]
      */

/* plasmic-vanilla-jsx/503
         <div className={rh.cls1()}  ><div className={rh.cls2()}  >{rh.childStr2()}</div></div>
         */
/* prettier-ignore-end */
